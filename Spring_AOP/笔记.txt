一·Spring的AOP
    AOP，意为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。
    作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强。
    AOP的底层实现：是通过Spring提供的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，
        代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。
    优势：减少重复代码，提高开发效率，并且便于维护。
        动态代理：在不修改源码的情况下，对目标方法进行相应的增强(修改)，作用是完成程序功能间的松耦合。
        动态代理技术：
            JDK代理：基于接口的动态代理技术
            cglib代理：基于父类的动态代理技术
    AOP术语:
        Target(目标对象):代理的目标对象
        Proxy(代理):一个类被AOP织入增强后,就会产生一个结果代理类
        Joinpoint(连接点):所谓连接点是指那些被拦截到的点.在Spring中,这些点指的是方法,
                因为Spring只支持方法类型的连接点就是说可以被增强的方法叫做连接点.
        Pointuct(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.
                就是说真正被增强的方法叫做切入点.
        Advise(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。
        Aspect(切面):切入点和通知的结合
        Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程,Spring采用动态代理织入，
                而Aspect采用编译织入和类装载期织入。
                织入是动作，将切点和通知结合起来

二·基于xml的AOP开发
    步骤：
        1.导入AOP坐标;
        2.创建目标接口和目标类(内部有切点);
        3.创建切面类(内部有增强方法);
        4.将目标类和切口类的创建权交给Spring;
        5.在applicationContext.xml中配置织入关系
        6.测试代码
    切点表达式：
        execution([修饰符]返回值类型 包名.类名.方法名(参数))

三·基于注解的AOP开发
    步骤：
        1.创建目标接口和目标类；
        2.创建切面类；
        3.将目标类和切面类的创建权交给Spring；
        4.在切面类中使用注解配置织入关系；
        5.在配置文件中开启组件扫描和AOP的自动代理
        6.测试。

    注解通知的类型：
        @注解通知("切点表达式")
            execution(* com.heroxin.anno.*.*(..))
            任意返回类型 com.heroxin.anno包下的任意类，任意方法名，任意参数
        @Before
        @AfterReturning
        @Around
        @AfterThrowing
        @After

    注解抽取：
        @Pointcut("execution(* com.heroxin.anno.*.*(..))")
        public void pointcut(){}

    关键：
        1.使用@Aspect标注切面；
        2.使用@注解通知标注通知方法；
        3.在配置文件中aop自动代理
            <aop:aspectj-autoproxy/>