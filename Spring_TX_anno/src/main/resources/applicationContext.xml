<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
">
<!--   添加组件扫描-->
        <context:component-scan base-package="com.heroxin"/>

<!--   配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/heroxin"/>
        <property name="user" value="root"/>
        <property name="password" value="heroxin"/>
    </bean>

<!--    配置 jdbcTemplate 模板对象-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    基于注解,这个自定义的方法可以使用注解,非自定义的方法就配置到 xml 当中即可-->
   <!-- <bean id="account" class="com.heroxin.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>

    &lt;!&ndash;    目标对象，它内部的方法就是切点&ndash;&gt;
    <bean id="accountService" class="com.heroxin.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="account"></property>
    </bean>-->

    <!--    配置平台事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

<!--    配置事务的注解驱动-->
<!--        这样注解配置事务才会起作用-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    基于注解 此处可以省略,然后在对应需要进行事务控制的方法(AccountServiceImpl.transfer)前进行注解配置-->
<!--    也可以在类前配置 @Transactional 代表该类中的方法全部都是该配置-->
<!--    遵循就近原则,方法前的配置级别高于类前配置的-->

    <!--    通知  事务的增强-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
&lt;!&ndash;             * 全部默认配置&ndash;&gt;
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash;    配置AOP的事务织入&ndash;&gt;
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.heroxin.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"></aop:advisor>
    </aop:config>-->
</beans>